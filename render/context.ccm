export module render.context;

import render.base_context;
import render.swapchain;
import render.input;

import std;
import toy;

export namespace render {

struct Context : BaseContext, SwapchainContext, InputProcessor, toy::ProactiveSingleton<Context> {

  Context(const std::string& app_name, int width, int height, bool multi_sample)
    : BaseContext(app_name, width, height, 2, multi_sample),
      SwapchainContext(*static_cast<BaseContext*>(this)), InputProcessor(this->window) {}
  Context(const Context&) = delete;
  Context(Context&&) = delete;
  auto operator=(const Context&) -> Context& = delete;
  auto operator=(Context&&) -> Context& = delete;

  auto tryRecreate() -> bool { return SwapchainContext::tryRecreate(*this); }
};

} // namespace render