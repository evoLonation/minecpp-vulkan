export module render.loop;

import render.context;
import "glfw_config.h";
import std;
import toy;

export namespace render {

class LoopAction {
public:
  virtual void action() = 0;
  LoopAction() = default;
};

enum class LoopOrder {
  INPUT = 0,
  COMMON = 1,
  UNIFORM_UPDATE = 998,
  GUI_RENDER = 999,
  DRAWCALL = 1000,
};

class Loop : public toy::ProactiveSingleton<Loop> {
private:
  template <LoopOrder>
  friend class LoopActionLoader;
  std::map<LoopOrder, toy::RefContainer<LoopAction>> _action_map;

public:
  Loop() = default;
  void startLoop() {
    while (!glfwWindowShouldClose(Context::getInstance().window)) {
      for (auto& [order, container] : _action_map) {
        for (auto* action : container) {
          action->action();
        }
      }
    }
  }
};

template <LoopOrder order>
class LoopActionLoader : public toy::InterfaceLoader<LoopAction> {
public:
  LoopActionLoader() : toy::InterfaceLoader<LoopAction>(Loop::getInstance()._action_map[order]) {}
};

} // namespace render