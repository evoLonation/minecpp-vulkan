export module render.vertex;

import render.context;
import render.resource;
import render.command;

import vulkan;

import <vulkan_config.h>;
import std;
import glm;
import toy;

export namespace render {

template <typename Type>
consteval auto formatMapper() -> VkFormat {
  if constexpr (std::same_as<Type, glm::vec2>) {
    return VK_FORMAT_R32G32_SFLOAT;
  } else if constexpr (std::same_as<Type, glm::vec3>) {
    return VK_FORMAT_R32G32B32_SFLOAT;
  } else if constexpr (std::same_as<Type, glm::vec4>) {
    return VK_FORMAT_R32G32B32A32_SFLOAT;
  } else if constexpr (std::same_as<Type, float>) {
    return VK_FORMAT_R32_SFLOAT;
  }
}

struct VertexInfo {
  const VkVertexInputBindingDescription&             binding_description;
  std::span<const VkVertexInputAttributeDescription> attribute_descriptions;
};

template <typename... DataTypes>
  requires(std::is_trivially_copyable_v<DataTypes> && ...)
struct Vertex : public std::array<char, (sizeof(DataTypes) + ...)> {
  using Base = std::array<char, (sizeof(DataTypes) + ...)>;
  Vertex(DataTypes&&... data) {
    int offset = 0;
    ((*reinterpret_cast<DataTypes*>(Base::data() + offset) = data, offset += sizeof(DataTypes)),
     ...);
  }
  static auto getVertexInfo() -> VertexInfo {
    return { binding_description<>, attribute_descriptions<> };
  }

  // must make the static member as template variable, otherwise the Vertex is incomplete type when
  // construct the variable
  template <typename = void>
  static constexpr auto binding_description = VkVertexInputBindingDescription{
    .binding = 0,
    .stride = sizeof(Vertex),
    // VK_VERTEX_INPUT_RATE_{VERTEX|INSTANCE}:
    // 是在每个vertex或者instance后移动到下一个data entry
    .inputRate = VK_VERTEX_INPUT_RATE_VERTEX,
  };
  template <typename = void>
  static constexpr auto attribute_descriptions = []() {
    auto attribute_descriptions =
      std::array<VkVertexInputAttributeDescription, sizeof...(DataTypes)>{};

    uint32_t i = 0;
    uint32_t offset = 0;
    ((attribute_descriptions[i] =
        VkVertexInputAttributeDescription{
          .location = i,
          .binding = 0,
          .format = formatMapper<DataTypes>(),
          .offset = offset,
        },
      i++,
      offset += sizeof(DataTypes)),
     ...);
    return attribute_descriptions;
  }();
};

class DeviceLocalBuffer : public vk::Buffer {
private:
  vk::Buffer _staging_buffer;
  vk::Memory _staging_memory;

  vk::Memory _memory;

public:
  DeviceLocalBuffer() = default;

  DeviceLocalBuffer(
    VkBufferUsageFlagBits usage, std::span<const std::byte> buffer_data, vk::BufferUse dst_use
  ) {
    auto& ctx = render::Context::getInstance();
    auto  buffer_size = (uint32_t)buffer_data.size();
    std::tie(_staging_buffer, _staging_memory) =
      vk::createStagingBuffer(ctx.pdevice_info.device, ctx.device, buffer_data);
    std::tie(static_cast<vk::Buffer&>(*this), _memory) = vk::createBuffer(
      ctx.pdevice_info.device,
      ctx.device,
      buffer_size,
      VK_BUFFER_USAGE_TRANSFER_DST_BIT | usage,
      VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT
    );

    auto& executor = CommandExecutor::getInstance();
    auto  copy_executor = executor[CommandExecutor::Family::TRANSFER];
    auto  graphics_executor = executor[CommandExecutor::Family::GRAPHICS];
    auto  family_transfer =
      vk::FamilyTransferInfo{ copy_executor.getFamily(), graphics_executor.getFamily() };
    auto copy_recorder = [&](VkCommandBuffer cmdbuf) {
      vk::recordCopyBuffer(cmdbuf, _staging_buffer, *this, buffer_size);
      vk::recordBufferBarrier(
        cmdbuf, *this, vk::BarrierScope::release(vk::BufferUse::COPY_DST), family_transfer
      );
    };
    auto acquire_recorder = [&](VkCommandBuffer cmdbuf) {
      vk::recordBufferBarrier(cmdbuf, *this, vk::BarrierScope::acquire(dst_use), family_transfer);
    };
    auto waitable = copy_executor.submit(copy_recorder, {}, 1).second;
    graphics_executor.submit(
      acquire_recorder, std::array{ WaitInfo{ waitable, vk::CommonUse::ALL } }, 0
    );
  }
};

class VertexBuffer : public DeviceLocalBuffer {
public:
  VertexBuffer() = default;
  template <toy::InstantiationOf<Vertex> VertexT>
  // using VertexT = Vertex<glm::vec3>;
  VertexBuffer(std::span<const VertexT> vertex_data)
    : DeviceLocalBuffer(
        VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
        std::as_bytes(vertex_data),
        vk::BufferUse::VERTEX_BUFFER_DRAW
      ) {}

  template <typename VertexT>
  static auto create(std::span<const VertexT> vertex_data) -> VertexBuffer {
    return VertexBuffer{ vertex_data };
  }
};

class IndexBuffer : public DeviceLocalBuffer {
  int _index_number;

public:
  IndexBuffer() = default;
  IndexBuffer(std::span<const uint16_t> indices)
    : DeviceLocalBuffer(
        VK_BUFFER_USAGE_INDEX_BUFFER_BIT, std::as_bytes(indices), vk::BufferUse::INDEX_BUFFER_DRAW
      ),
      _index_number(indices.size()) {}

  auto getIndexNumber() -> int { return _index_number; }
};

} // namespace render
