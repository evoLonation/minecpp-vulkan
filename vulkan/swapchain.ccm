export module vulkan.swapchain;

import "vulkan_config.h";
import "glfw_config.h";
import vulkan.resource;
import std;

export namespace vk {

/*
 * surface 相关
 * 借助 instance 创建 surface
 */
auto createSurface(VkInstance instance, GLFWwindow* p_window) -> Surface;

/*
 * swap chain 相关
 */
using SwapchainResource = std::tuple<Swapchain, VkExtent2D, std::vector<VkImage>>;
enum class SwapchainCreateError {
  EXTENT_ZERO,
};
auto createSwapchain(
  VkPhysicalDevice   pdevice,
  VkSurfaceKHR       surface,
  VkDevice           device,
  VkSurfaceFormatKHR surface_format,
  VkPresentModeKHR   present_mode,
  GLFWwindow*        p_window,
  VkSwapchainKHR     old_swapchain
) -> std::expected<SwapchainResource, SwapchainCreateError>;

} // namespace vk