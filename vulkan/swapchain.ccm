export module vulkan.swapchain;

import "vulkan_config.h";
import vulkan.resource;
import std;

export namespace vk {

/*
 * surface 相关
 * 借助 instance 创建 surface
 */
auto createSurface(VkInstance instance, GLFWwindow* p_window) -> Surface;

/*
 * swap chain 相关
 */
enum class SwapchainCreateError {
  EXTENT_ZERO,
};
auto createSwapchain(VkSurfaceKHR                    surface,
                     VkDevice                        device,
                     const VkSurfaceCapabilitiesKHR& capabilities,
                     VkSurfaceFormatKHR              surface_format,
                     VkPresentModeKHR                present_mode,
                     GLFWwindow*                     p_window,
                     std::span<const uint32_t>       sharing_family_indices,
                     VkSwapchainKHR                  old_swapchain)
  -> std::expected<std::pair<Swapchain, VkExtent2D>, SwapchainCreateError>;

auto createSwapchainImageViews(VkDevice       device,
                               VkSwapchainKHR swapchain,
                               VkFormat       format) -> std::vector<ImageView>;

} // namespace vk