export module vulkan.sync;

import "vulkan_config.h";
import vulkan.resource;
import vulkan.tool;
import std;

export namespace vk {

auto createSemaphore(VkDevice device) -> Semaphore {
  VkSemaphoreCreateInfo create_info{
    .sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,

  };
  return Semaphore{ device, create_info };
}
auto createFence(VkDevice device, bool signaled) -> Fence {
  VkFenceCreateInfo create_info{
    .sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
  };
  if (signaled) {
    create_info.flags = VK_FENCE_CREATE_SIGNALED_BIT;
  }
  return Fence{ device, create_info };
}

/**
 * @brief 等待一个fence，等待结束后reset
 */
void consumeFence(VkDevice device, VkFence fence) {
  checkVkResult(
    vkWaitForFences(device, 1, &fence, VK_TRUE, std::numeric_limits<uint64_t>::max()), "wait fences"
  );
  checkVkResult(vkResetFences(device, 1, &fence), "reset fence");
}

} // namespace vk