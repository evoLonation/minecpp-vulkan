export module vulkan.device;

import "vulkan_config.h";
import vulkan.resource;
import std;

export namespace vk {

/*
 * physical device 相关
 * 借助 instance 得到所有 physical device
 * 与 surface 结合得到 physical device 的属性，并选择一个合适的
 * features, queue family indices, extensions 用于创建 logical device
 * surface capability, format, present mode 用于创建 swap chain
 */

struct PhysicalDeviceInfo {
  VkPhysicalDevice           device;
  VkPhysicalDeviceProperties properties;
  VkPhysicalDeviceFeatures   features;
  VkPresentModeKHR           present_mode;
  VkSurfaceFormatKHR         surface_format;
  std::vector<uint32_t>      family_indices;
};
struct QueueFamilyCheckContext {
  VkPhysicalDevice        device;
  VkSurfaceKHR            surface;
  size_t                  index;
  VkQueueFamilyProperties properties;
};
struct DeviceCheckContext {
  VkPhysicalDeviceProperties properties;
  VkPhysicalDeviceFeatures   features;
};
struct SurfaceCheckContext {
  std::vector<VkPresentModeKHR>   present_modes;
  std::vector<VkSurfaceFormatKHR> surface_formats;
};
struct SelectedSurfaceInfo {
  VkPresentModeKHR   present_mode;
  VkSurfaceFormatKHR surface_format;
};
using SurfaceChecker =
  std::function<std::optional<SelectedSurfaceInfo>(const SurfaceCheckContext&)>;
using DeviceChecker = std::function<bool(const DeviceCheckContext&)>;
/**
 * @brief first: queue number, second: queue checker
 */
using QueueRequest = std::pair<int, std::function<bool(const QueueFamilyCheckContext&)>>;
using SurfaceChecker =
  std::function<std::optional<SelectedSurfaceInfo>(const SurfaceCheckContext&)>;

auto pickPhysicalDevice(
  VkInstance                    instance,
  VkSurfaceKHR                  surface,
  std::span<const char*>        required_extensions,
  DeviceChecker                 device_checker,
  SurfaceChecker                surface_checker,
  std::span<const QueueRequest> queue_requests
) -> PhysicalDeviceInfo;

auto getQueueFamilyIndices(
  VkPhysicalDevice device, VkSurfaceKHR surface, std::span<const QueueRequest> queue_requests
) -> std::optional<std::vector<uint32_t>>;

auto checkPhysicalDeviceSupport(const DeviceCheckContext& ctx) -> bool;
auto checkSurfaceSupport(const SurfaceCheckContext& ctx) -> std::optional<SelectedSurfaceInfo>;
auto checkGraphicQueue(const QueueFamilyCheckContext& ctx) -> bool;
auto checkPresentQueue(const QueueFamilyCheckContext& ctx) -> bool;
auto checkTransferQueue(const QueueFamilyCheckContext& ctx) -> bool;

/**
 * @param queue_create_info first: family index, second: queue number
 */
auto createDevice(
  VkPhysicalDevice                          pdevice,
  std::span<const std::pair<uint32_t, int>> queue_create_info,
  VkPhysicalDeviceFeatures                  features,
  std::span<const char*>                    required_extensions
) -> std::pair<Device, std::vector<std::vector<VkQueue>>>;

} // namespace vk