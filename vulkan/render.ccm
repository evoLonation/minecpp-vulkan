export module vulkan.render;

import "vulkan_config.h";
import vulkan.resource;
import vulkan.vertex;
import std;

export namespace vk {

auto createRenderPass(VkDevice device, VkFormat color_format, VkFormat depth_format) -> RenderPass;

auto createFramebuffer(
  VkRenderPass render_pass,
  VkDevice     device,
  VkExtent2D   extent,
  VkImageView  color_image,
  VkImageView  depth_image
) -> Framebuffer;

struct PipelineResource {
  ShaderModule   vertex_shader;
  ShaderModule   frag_shader;
  PipelineLayout pipeline_layout;
  Pipeline       pipeline;
};

auto createGraphicsPipeline(
  VkDevice                                           device,
  VkRenderPass                                       render_pass,
  std::span<const VkVertexInputBindingDescription>   vertex_binding_descriptions,
  std::span<const VkVertexInputAttributeDescription> vertex_attribute_descriptions,
  std::span<const VkDescriptorSetLayout>             descriptor_set_layouts
) -> PipelineResource;

void recordCommandBuffer(
  VkCommandBuffer                  command_buffer,
  VkRenderPass                     render_pass,
  VkPipeline                       graphics_pipeline,
  VkExtent2D                       extent,
  VkFramebuffer                    framebuffer,
  VertexBuffer&                    vertex_buffer,
  IndexBuffer&                     index_buffer,
  VkPipelineLayout                 pipeline_layout,
  std::span<const VkDescriptorSet> descriptor_sets
);

} // namespace vk