export module vulkan.render;

import "vulkan_config.h";
import vulkan.resource;
import std;

export namespace vk {

auto createRenderPass(VkDevice device, VkFormat format) -> RenderPass;

struct PipelineResource {
  ShaderModule   vertex_shader;
  ShaderModule   frag_shader;
  PipelineLayout pipeline_layout;
  Pipeline       pipeline;
};

auto createGraphicsPipeline(
  VkDevice                                         device,
  VkRenderPass                                     render_pass,
  std::span<const VkVertexInputBindingDescription> vertex_binding_descriptions,
  std::span<const VkVertexInputAttributeDescription>
                                         vertex_attribute_descriptions,
  std::span<const VkDescriptorSetLayout> descriptor_set_layouts)
  -> PipelineResource;

auto createFramebuffers(VkRenderPass                 render_pass,
                        VkDevice                     device,
                        VkExtent2D                   extent,
                        std::span<const VkImageView> image_views)
  -> std::vector<Framebuffer>;

auto createCommandPool(VkDevice device, uint32_t graphic_family_index)
  -> CommandPool;
auto allocateCommandBuffers(VkDevice      device,
                            VkCommandPool command_pool,
                            uint32_t      count) -> CommandBuffers;

} // namespace vk