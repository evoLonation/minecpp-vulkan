export module vulkan.render;

import "vulkan_config.h";
import vulkan.resource;
import std;
import toy;

export namespace vk {

auto createRenderPass(
  VkDevice                             device,
  VkFormat                             color_format,
  VkFormat                             depth_format,
  std::optional<VkSampleCountFlagBits> sample_count
) -> RenderPass;

auto createFramebuffer(
  VkRenderPass               render_pass,
  VkDevice                   device,
  VkExtent2D                 extent,
  VkImageView                color_image,
  VkImageView                depth_image,
  std::optional<VkImageView> multi_sample_image
) -> Framebuffer;

struct PipelineResource {
  ShaderModule   vertex_shader;
  ShaderModule   frag_shader;
  PipelineLayout pipeline_layout;
  Pipeline       pipeline;
};

struct StencilOption {
  VkStencilOpState front;
  VkStencilOpState back;

  bool dynamic_reference;
};

auto createGraphicsPipeline(
  VkPhysicalDevice                                   pdevice,
  VkDevice                                           device,
  VkRenderPass                                       render_pass,
  VkPrimitiveTopology                                topology,
  std::string_view                                   vertex_shader_name,
  std::string_view                                   frag_shader_name,
  std::span<const VkVertexInputBindingDescription>   vertex_binding_descriptions,
  std::span<const VkVertexInputAttributeDescription> vertex_attribute_descriptions,
  std::span<const VkDescriptorSetLayout>             descriptor_set_layouts,
  VkSampleCountFlagBits                              sample_count,
  std::optional<StencilOption>                       stencil_option
) -> PipelineResource;

struct DrawUnit {
  VkBuffer                         vertex_buffer;
  VkBuffer                         index_buffer;
  uint32_t                         count;
  std::span<const VkDescriptorSet> descriptor_sets;
};

void recordRenderPass(
  VkCommandBuffer                      cmdbuf,
  VkRenderPass                         render_pass,
  VkFramebuffer                        framebuffer,
  VkExtent2D                           extent,
  std::function<void(VkCommandBuffer)> recorder,
  bool                                 multi_sample
);

// first: the drawunit index to apply reference; second: reference
using StencilReferences = std::span<const std::pair<size_t, uint32_t>>;

void recordDrawUnits(
  VkCommandBuffer                  cmdbuf,
  VkPipeline                       graphics_pipeline,
  VkExtent2D                       extent,
  VkPipelineLayout                 pipeline_layout,
  toy::AnyView<DrawUnit>           draw_units,
  std::optional<StencilReferences> stencil_references
);

auto getOutliningStencil() -> std::pair<StencilOption, StencilOption>;

} // namespace vk