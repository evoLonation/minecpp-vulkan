export module vulkan.buffer;

import "vulkan_config.h";
import vulkan.resource;
import vulkan.tool;
import vulkan.command;
import vulkan.sync;
import std;
import glm;
import toy;

export namespace vk {

template <typename MemoryOwner>
  requires std::same_as<MemoryOwner, VkBuffer> || std::same_as<MemoryOwner, VkImage>
auto createMemory(
  VkPhysicalDevice      physical_device,
  VkDevice              device,
  MemoryOwner           owner,
  VkMemoryPropertyFlags property_flags
) -> Memory {
  /*
   * alignment: The offset in bytes where the buffer begins in the allocated
   *  region of memory, depends on bufferInfo.usage and bufferInfo.flags.
   * memoryTypeBits: Bit field of the memory types that are suitable for the
   *  buffer.
   */
  VkMemoryRequirements memory_requirements;
  if constexpr (std::same_as<MemoryOwner, VkBuffer>) {
    vkGetBufferMemoryRequirements(device, owner, &memory_requirements);
  } else if constexpr (std::same_as<MemoryOwner, VkImage>) {
    vkGetImageMemoryRequirements(device, owner, &memory_requirements);
  } else {
    std::unreachable();
  }

  VkPhysicalDeviceMemoryProperties memory_properties;
  vkGetPhysicalDeviceMemoryProperties(physical_device, &memory_properties);
  uint32_t memory_type_index;
  if (auto optional = toy::findIf(
        std::span(memory_properties.memoryTypes, memory_properties.memoryTypeCount) |
          toy::enumerate,
        [memory_requirements, property_flags](auto pair) {
          auto [i, memory_type] = pair;
          return (memory_requirements.memoryTypeBits & (1 << i)) &&
                 (memory_type.propertyFlags & property_flags) == property_flags;
        }
      );
      optional.has_value()) {
    memory_type_index = optional->first;
  } else {
    toy::throwf("can not find suitable memory type");
  }
  auto allocate_info = VkMemoryAllocateInfo{
    .sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
    .allocationSize = memory_requirements.size,
    .memoryTypeIndex = memory_type_index,
  };
  return Memory{ device, allocate_info };
}

void copyToMemory(VkDevice device, VkDeviceMemory memory, std::span<const std::byte> buffer_data) {
  void* data;
  auto  buffer_size = buffer_data.size();
  checkVkResult(vkMapMemory(device, memory, 0, buffer_size, 0, &data), "map memory");
  std::memcpy(data, buffer_data.data(), buffer_size);
  vkUnmapMemory(device, memory);
}

auto createBuffer(
  VkPhysicalDevice      physical_device,
  VkDevice              device,
  VkDeviceSize          buffer_size,
  VkBufferUsageFlags    usage,
  VkMemoryPropertyFlags property_flags
) -> std::pair<Buffer, Memory> {
  auto buffer_info = VkBufferCreateInfo{
    .sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
    .size = buffer_size,
    .usage = usage,
    .sharingMode = VK_SHARING_MODE_EXCLUSIVE,
  };
  auto buffer = Buffer{ device, buffer_info };
  auto memory = createMemory(physical_device, device, buffer.get(), property_flags);
  // offset 是在一个内存给多个缓冲区用的时候设置的，要除的尽
  // memRequirements.alignment
  vkBindBufferMemory(device, buffer, memory, 0);
  return { std::move(buffer), std::move(memory) };
}

auto createStagingBuffer(
  VkPhysicalDevice physical_device, VkDevice device, std::span<const std::byte> buffer_data
) -> std::pair<Buffer, Memory> {
  auto buffer_size = buffer_data.size() * sizeof(byte);
  auto [staging_buffer, staging_memory] = createBuffer(
    physical_device,
    device,
    buffer_size,
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT
  );
  copyToMemory(device, staging_memory, buffer_data);
  return std::pair{ std::move(staging_buffer), std::move(staging_memory) };
}

void recordCopyBuffer(
  VkCommandBuffer transfer_cmdbuf,
  VkBuffer        src_buffer,
  VkBuffer        dst_buffer,
  VkDeviceSize    buffer_size
) {
  auto copy_info = VkBufferCopy{
    // this offset is about buffer, not about memory
    .srcOffset = 0,
    .dstOffset = 0,
    .size = buffer_size,
  };
  vkCmdCopyBuffer(transfer_cmdbuf, src_buffer, dst_buffer, 1, &copy_info);
}

} // namespace vk
