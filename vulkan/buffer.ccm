export module vulkan.buffer;

import "vulkan_config.h";
import vulkan.tool;
import std;
import glm;
import toy;

export namespace vk {

template <int AttributeCount>
struct VertexInfo {
  VkVertexInputBindingDescription binding_description;
  std::array<VkVertexInputAttributeDescription, AttributeCount>
    attribute_descriptions;
};

template <typename... DataTypes>
  requires(std::is_trivially_copyable_v<DataTypes> && ...)
struct Vertex : public std::array<char, (sizeof(DataTypes) + ...)> {
  using Base = std::array<char, (sizeof(DataTypes) + ...)>;
  Vertex(DataTypes&&... data) {
    int offset = 0;
    ((*reinterpret_cast<DataTypes*>(Base::data() + offset) = data,
      offset += sizeof(DataTypes)),
     ...);
  }
  static consteval auto getVertexInfo() -> VertexInfo<sizeof...(DataTypes)>;
};

template <typename Type>
consteval auto formatMapper() -> VkFormat {
  if constexpr (std::same_as<Type, glm::vec2>) {
    return VK_FORMAT_R32G32_SFLOAT;
  } else if constexpr (std::same_as<Type, glm::vec3>) {
    return VK_FORMAT_R32G32B32_SFLOAT;
  } else if constexpr (std::same_as<Type, glm::vec4>) {
    return VK_FORMAT_R32G32B32A32_SFLOAT;
  } else if constexpr (std::same_as<Type, float>) {
    return VK_FORMAT_R32_SFLOAT;
  }
}

template <typename... DataTypes>
  requires(std::is_trivially_copyable_v<DataTypes> && ...)
consteval auto Vertex<DataTypes...>::getVertexInfo()
  -> VertexInfo<sizeof...(DataTypes)> {
  auto binding_description = VkVertexInputBindingDescription{
    .binding = 0,
    .stride = sizeof(Vertex),
    // VK_VERTEX_INPUT_RATE_{VERTEX|INSTANCE}:
    // 是在每个vertex或者instance后移动到下一个data entry
    .inputRate = VK_VERTEX_INPUT_RATE_VERTEX,
  };
  auto attribute_descriptions =
    std::array<VkVertexInputAttributeDescription, sizeof...(DataTypes)>{};

  uint32_t i = 0;
  uint32_t offset = 0;
  ((attribute_descriptions[i] =
      VkVertexInputAttributeDescription{
        .location = i,
        .binding = 0,
        .format = formatMapper<DataTypes>(),
        .offset = offset,
      },
    i++,
    offset += sizeof(DataTypes)),
   ...);
  return { binding_description, attribute_descriptions };
}

auto createBuffer(VkDevice              device,
                  VkPhysicalDevice      physical_device,
                  VkDeviceSize          buffer_size,
                  VkBufferUsageFlags    usage,
                  VkMemoryPropertyFlags property_flags)
  -> std::pair<VkBuffer, VkDeviceMemory> {
  auto buffer_info = VkBufferCreateInfo{
    .sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
    .size = buffer_size,
    .usage = usage,
    .sharingMode = VK_SHARING_MODE_EXCLUSIVE,
  };
  auto buffer =
    createVkResource(vkCreateBuffer, "buffer", device, &buffer_info);
  /*
   * alignment: The offset in bytes where the buffer begins in the allocated
   *  region of memory, depends on bufferInfo.usage and bufferInfo.flags.
   * memoryTypeBits: Bit field of the memory types that are suitable for the
   *  buffer.
   */
  VkMemoryRequirements memory_requirements;
  vkGetBufferMemoryRequirements(device, buffer, &memory_requirements);

  VkPhysicalDeviceMemoryProperties memory_properties;
  vkGetPhysicalDeviceMemoryProperties(physical_device, &memory_properties);
  uint32_t memory_type_index;
  if (auto optional = toy::findIf(
        std::span(memory_properties.memoryTypes,
                  memory_properties.memoryTypeCount) |
          toy::enumerate,
        [memory_requirements, property_flags](auto pair) {
          auto [i, memory_type] = pair;
          return (memory_requirements.memoryTypeBits & (1 << i)) &&
                 (memory_type.propertyFlags & property_flags) == property_flags;
        });
      optional.has_value()) {
    memory_type_index = optional->first;
  } else {
    toy::throwf("can not find suitable memory type");
  }
  auto allocate_info = VkMemoryAllocateInfo{
    .sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
    .allocationSize = memory_requirements.size,
    .memoryTypeIndex = memory_type_index,
  };
  auto vertex_buffer_memory = createVkResource(
    vkAllocateMemory, "buffer memory allocation", device, &allocate_info);
  // offset 是在一个内存给多个缓冲区用的时候设置的，要除的尽
  // memRequirements.alignment
  vkBindBufferMemory(device, buffer, vertex_buffer_memory, 0);
  return { buffer, vertex_buffer_memory };
}

void destroyBuffer(VkBuffer       buffer,
                   VkDeviceMemory memory,
                   VkDevice       device) noexcept {
  vkFreeMemory(device, memory, nullptr);
  vkDestroyBuffer(device, buffer, nullptr);
}

void copyBuffer(VkBuffer        src_buffer,
                VkBuffer        dst_buffer,
                VkDeviceSize    buffer_size,
                VkDevice        device,
                VkQueue         queue,
                VkCommandBuffer command_buffer,
                VkFence         fence) {
  VkCommandBufferBeginInfo begin_info{
    .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
    .flags = VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
    .pInheritanceInfo = nullptr,
  };
  checkVkResult(vkBeginCommandBuffer(command_buffer, &begin_info),
                "begin record copy buffer");
  auto copy_info = VkBufferCopy{
    // this offset is about buffer, not about memory
    .srcOffset = 0,
    .dstOffset = 0,
    .size = buffer_size,
  };
  vkCmdCopyBuffer(command_buffer, src_buffer, dst_buffer, 1, &copy_info);
  checkVkResult(vkEndCommandBuffer(command_buffer), "end record copy buffer");

  auto submit_info = VkSubmitInfo{
    .sType = VK_STRUCTURE_TYPE_SUBMIT_INFO,
    .waitSemaphoreCount = 0,
    .commandBufferCount = 1,
    .pCommandBuffers = &command_buffer,
    .signalSemaphoreCount = 0,
  };
  checkVkResult(vkQueueSubmit(queue, 1, &submit_info, fence), "submit queue");
  checkVkResult(
    vkWaitForFences(
      device, 1, &fence, VK_TRUE, std::numeric_limits<uint64_t>::max()),
    "wait fences");
  checkVkResult(vkResetFences(device, 1, &fence), "reset fence");
}

auto createDeviceLocalBuffer(std::span<const std::byte> buffer_data,
                             VkBufferUsageFlagBits      usage,
                             VkPhysicalDevice           physical_device,
                             VkDevice                   device,
                             VkQueue                    transfer_queue,
                             VkCommandBuffer            transfer_command_buffer,
                             VkFence                    transfer_fence)
  -> std::pair<VkBuffer, VkDeviceMemory> {
  auto buffer_size = buffer_data.size() * sizeof(byte);
  auto [staging_buffer, staging_memory] = createBuffer(
    device,
    physical_device,
    buffer_size,
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);

  void* data;
  checkVkResult(vkMapMemory(device, staging_memory, 0, buffer_size, 0, &data),
                "map memory");
  std::memcpy(data, buffer_data.data(), buffer_size);
  vkUnmapMemory(device, staging_memory);

  auto [vertex_buffer, vertex_memory] =
    createBuffer(device,
                 physical_device,
                 buffer_size,
                 VK_BUFFER_USAGE_TRANSFER_DST_BIT | usage,
                 VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);

  copyBuffer(staging_buffer,
             vertex_buffer,
             buffer_size,
             device,
             transfer_queue,
             transfer_command_buffer,
             transfer_fence);

  destroyBuffer(staging_buffer, staging_memory, device);

  return { vertex_buffer, vertex_memory };
}

auto createVertexBuffer(ranges::contiguous_range auto&& vertex_data,
                        VkPhysicalDevice                physical_device,
                        VkDevice                        device,
                        VkQueue                         transfer_queue,
                        VkCommandBuffer                 transfer_command_buffer,
                        VkFence                         transfer_fence)
  -> std::pair<VkBuffer, VkDeviceMemory> {
  return createDeviceLocalBuffer(std::as_bytes(std::span{ vertex_data }),
                                 VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
                                 physical_device,
                                 device,
                                 transfer_queue,
                                 transfer_command_buffer,
                                 transfer_fence);
}

auto createIndexBuffer(std::span<const uint16_t> vertex_indices,
                       VkPhysicalDevice          physical_device,
                       VkDevice                  device,
                       VkQueue                   transfer_queue,
                       VkCommandBuffer           transfer_command_buffer,
                       VkFence                   transfer_fence)
  -> std::pair<VkBuffer, VkDeviceMemory> {
  return createDeviceLocalBuffer(std::as_bytes(vertex_indices),
                                 VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
                                 physical_device,
                                 device,
                                 transfer_queue,
                                 transfer_command_buffer,
                                 transfer_fence);
}

} // namespace vk
