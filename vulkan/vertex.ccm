export module vulkan.vertex;

import <vulkan_config.h>;
import vulkan.resource;
import vulkan.buffer;
import vulkan.sync;
import vulkan.command;
import toy;
import glm;
import std;

export namespace vk {

template <int AttributeCount>
struct VertexInfo {
  VkVertexInputBindingDescription                               binding_description;
  std::array<VkVertexInputAttributeDescription, AttributeCount> attribute_descriptions;
};

template <typename... DataTypes>
  requires(std::is_trivially_copyable_v<DataTypes> && ...)
struct Vertex : public std::array<char, (sizeof(DataTypes) + ...)> {
  using Base = std::array<char, (sizeof(DataTypes) + ...)>;
  Vertex(DataTypes&&... data) {
    int offset = 0;
    ((*reinterpret_cast<DataTypes*>(Base::data() + offset) = data, offset += sizeof(DataTypes)),
     ...);
  }
  static consteval auto getVertexInfo() -> VertexInfo<sizeof...(DataTypes)>;
};

template <typename Type>
consteval auto formatMapper() -> VkFormat {
  if constexpr (std::same_as<Type, glm::vec2>) {
    return VK_FORMAT_R32G32_SFLOAT;
  } else if constexpr (std::same_as<Type, glm::vec3>) {
    return VK_FORMAT_R32G32B32_SFLOAT;
  } else if constexpr (std::same_as<Type, glm::vec4>) {
    return VK_FORMAT_R32G32B32A32_SFLOAT;
  } else if constexpr (std::same_as<Type, float>) {
    return VK_FORMAT_R32_SFLOAT;
  }
}

template <typename... DataTypes>
  requires(std::is_trivially_copyable_v<DataTypes> && ...)
consteval auto Vertex<DataTypes...>::getVertexInfo() -> VertexInfo<sizeof...(DataTypes)> {
  auto binding_description = VkVertexInputBindingDescription{
    .binding = 0,
    .stride = sizeof(Vertex),
    // VK_VERTEX_INPUT_RATE_{VERTEX|INSTANCE}:
    // 是在每个vertex或者instance后移动到下一个data entry
    .inputRate = VK_VERTEX_INPUT_RATE_VERTEX,
  };
  auto attribute_descriptions =
    std::array<VkVertexInputAttributeDescription, sizeof...(DataTypes)>{};

  uint32_t i = 0;
  uint32_t offset = 0;
  ((attribute_descriptions[i] =
      VkVertexInputAttributeDescription{
        .location = i,
        .binding = 0,
        .format = formatMapper<DataTypes>(),
        .offset = offset,
      },
    i++,
    offset += sizeof(DataTypes)),
   ...);
  return { binding_description, attribute_descriptions };
}

class VertexBuffer : public DeviceLocalBuffer<VertexBuffer> {
private:
  using Base = DeviceLocalBuffer<VertexBuffer>;
  friend Base;
  static auto getDstUse() -> BufferUse { return BufferUse::VERTEX_BUFFER_DRAW; }

public:
  VertexBuffer() = default;
  template <ranges::contiguous_range Range>
    requires(toy::InstantiationOf<ranges::range_value_t<Range>, Vertex>)
  VertexBuffer(
    VkPhysicalDevice                  pdevice,
    VkDevice                          device,
    VkQueue                           transfer_queue,
    VkCommandBuffer                   transfer_cmdbuf,
    Range&&                           vertex_data,
    std::optional<FamilyTransferInfo> family_transfer
  )
    : DeviceLocalBuffer<VertexBuffer>(
        pdevice,
        device,
        transfer_queue,
        transfer_cmdbuf,
        std::as_bytes(std::span{ vertex_data }),
        VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
        family_transfer
      ) {}
  void recordBind(VkCommandBuffer cmdbuf) {
    auto offset = (VkDeviceSize)0;
    vkCmdBindVertexBuffers(cmdbuf, 0, 1, &_buffer.get(), &offset);
  }
};

class IndexBuffer : public DeviceLocalBuffer<IndexBuffer> {
private:
  using Base = DeviceLocalBuffer<IndexBuffer>;
  friend Base;
  static auto getDstUse() -> BufferUse { return BufferUse::VERTEX_BUFFER_DRAW; }

  uint32_t _indices_size;

public:
  IndexBuffer() = default;

  IndexBuffer(
    VkPhysicalDevice                  pdevice,
    VkDevice                          device,
    VkQueue                           transfer_queue,
    VkCommandBuffer                   transfer_cmdbuf,
    std::span<uint16_t>               indices,
    std::optional<FamilyTransferInfo> family_transfer
  )
    : DeviceLocalBuffer<IndexBuffer>(
        pdevice,
        device,
        transfer_queue,
        transfer_cmdbuf,
        std::as_bytes(indices),
        VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
        family_transfer
      ),
      _indices_size(indices.size()) {}
  void recordBind(VkCommandBuffer cmdbuf) {
    vkCmdBindIndexBuffer(cmdbuf, _buffer, 0, VK_INDEX_TYPE_UINT16);
  }
  auto getIndicesSize() const -> uint32_t { return _indices_size; }
};

} // namespace vk
