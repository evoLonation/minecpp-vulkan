export module vulkan.image;

import "vulkan_config.h";
import "stb_image.h";
import std;
import toy;
import vulkan.resource;
import vulkan.buffer;
import vulkan.command;
import vulkan.sync;
import vulkan.descriptor;

export namespace vk {

auto createImageView(VkDevice device, VkImage image, VkFormat format) -> ImageView {
  auto create_info = VkImageViewCreateInfo{
    .sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
    .pNext = nullptr,
    .flags = 0,
    .image = image,
    .viewType = VK_IMAGE_VIEW_TYPE_2D,
    .format = format,
    // 颜色通道映射
    .components = {
      .r = VK_COMPONENT_SWIZZLE_IDENTITY,
      .g = VK_COMPONENT_SWIZZLE_IDENTITY,
      .b = VK_COMPONENT_SWIZZLE_IDENTITY,
      .a = VK_COMPONENT_SWIZZLE_IDENTITY,
    },
    // view 访问 image 资源的范围
    .subresourceRange = {
      .aspectMask = VK_IMAGE_ASPECT_COLOR_BIT,
      .baseMipLevel = 0,
      .levelCount = 1,
      .baseArrayLayer = 0,
      .layerCount = 1,
    },
  };
  return ImageView{ device, create_info };
}

auto createSampler(VkDevice device, float max_anisotropy) -> Sampler {
  toy::debugf("max_anisotropy: {}", max_anisotropy);
  auto sampler_info = VkSamplerCreateInfo{
    .sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
    .pNext = nullptr,
    .flags = 0,
    // VK_FILTER_NEAREST and VK_FILTER_LINEAR, 插值模式
    .magFilter = VK_FILTER_LINEAR,
    .minFilter = VK_FILTER_LINEAR,
    .mipmapMode = VK_SAMPLER_MIPMAP_MODE_LINEAR,
    // VK_SAMPLER_ADDRESS_MODE_REPEAT：超出图像尺寸时重复纹理。
    // VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT：同上，但是镜像图像。
    // VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE：使最接近坐标的边缘的颜色超出图像尺寸。
    // VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE：同上，但使用对面的边
    // VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER：采样超出尺寸时返回纯色
    .addressModeU = VK_SAMPLER_ADDRESS_MODE_REPEAT,
    .addressModeV = VK_SAMPLER_ADDRESS_MODE_REPEAT,
    .addressModeW = VK_SAMPLER_ADDRESS_MODE_REPEAT,
    .mipLodBias = 0.0f,
    // 各向异性过滤
    .anisotropyEnable = VK_TRUE,
    .maxAnisotropy = max_anisotropy,
    .compareEnable = VK_FALSE,
    .compareOp = VK_COMPARE_OP_ALWAYS,
    .minLod = 0.0f,
    .maxLod = 0.0f,
    .borderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
    // VK_FALSE: (0, 1)寻址， 反之 (0, width), (0, height)寻址
    .unnormalizedCoordinates = VK_FALSE,
  };
  return Sampler{ device, sampler_info };
}

class SampledTexture {
private:
  Buffer _staging_buffer;
  Memory _staging_memory;

  Image     _image;
  Memory    _memory;
  ImageView _image_view;
  Sampler   _sampler;

  std::optional<FamilyTransferInfo> _family_transfer;

  Semaphore _release_sema;

  static constexpr auto _src_use = ImageUse::COPY_DST;
  static constexpr auto _dst_use = ImageUse::FRAGMENT_SAMPLER;
  static constexpr auto _use_pair = std::pair{ _src_use, _dst_use };

public:
  SampledTexture() = default;
  SampledTexture(
    VkPhysicalDevice                  pdevice,
    VkDevice                          device,
    VkQueue                           transfer_queue,
    VkCommandBuffer                   transfer_cmdbuf,
    VkDescriptorSet                   descrip_set,
    float                             max_anisotropy,
    std::optional<FamilyTransferInfo> family_transfer
  ) {
    int   width, height, channels;
    auto* image_path = "textures/texture.jpg";
    auto* pixels = stbi_load(image_path, &width, &height, &channels, STBI_rgb_alpha);
    auto  image_size = static_cast<VkDeviceSize>(width * height * 4);
    if (pixels == nullptr) {
      toy::throwf("failed to load image {}", image_path);
    }
    auto image_data = std::as_bytes(std::span{ pixels, image_size });
    toy::debugf("image {} info: width {}, height {}", image_path, width, height);

    std::tie(_staging_buffer, _staging_memory) = createStagingBuffer(pdevice, device, image_data);

    stbi_image_free(pixels);

    auto format = VK_FORMAT_R8G8B8A8_SRGB;
    // if use for staging image, combine use:
    // VK_IMAGE_TILING_LINEAR, VK_IMAGE_LAYOUT_PREINITIALIZED,
    // VK_IMAGE_USAGE_TRANSFER_SRC_BIT
    auto image_info = VkImageCreateInfo{
      .sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
      .pNext = nullptr,
      .flags = 0,
      .imageType = VK_IMAGE_TYPE_2D,
      .format = format,
      .extent =
        VkExtent3D{
          .width = (uint32_t)width,
          .height = (uint32_t)height,
          .depth = 1,
        },
      .mipLevels = 1,
      .arrayLayers = 1,
      .samples = VK_SAMPLE_COUNT_1_BIT,
      // VK_IMAGE_TILING_LINEAR: Texels are laid out in row-major
      // order like our pixels array
      // 想要直接访问 image 中的像素的话就用 VK_IMAGE_TILING_LINEAR
      // VK_IMAGE_TILING_OPTIMAL: Texels are laid out in an implementation
      // defined order for optimal access
      .tiling = VK_IMAGE_TILING_OPTIMAL,
      .usage = VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT,
      .sharingMode = VK_SHARING_MODE_EXCLUSIVE,
      // 仅当VK_SHARING_MODE_CONCURRENT时设置
      .queueFamilyIndexCount = 0,
      .pQueueFamilyIndices = nullptr,
      // VK_IMAGE_LAYOUT_UNDEFINED: Not usable by the GPU
      // and the very first transition will discard the texels
      // VK_IMAGE_LAYOUT_PREINITIALIZED: Not usable by the GPU
      // but the first transition will preserve the texels
      .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
    };
    _image = Image{ device, image_info };
    _memory = createMemory(pdevice, device, _image.get(), VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
    vkBindImageMemory(device, _image, _memory, 0);

    _image_view = createImageView(device, _image, format);
    _sampler = createSampler(device, max_anisotropy);
    updateDescriptorSet(device, descrip_set, std::pair{ _image_view.get(), _sampler.get() });

    _family_transfer = family_transfer;

    auto recorder = [&](VkCommandBuffer cmdbuf) {
      recordBarrier(cmdbuf, _image.get(), { ImageUse::UNDEFINED, _src_use }, std::nullopt);

      auto image_copy = VkBufferImageCopy{
        .bufferOffset = 0,
        // bufferRowLength and bufferImageHeight
        // 用于更详细的定义buffer的内存如何映射到image
        .bufferRowLength = 0,
        .bufferImageHeight = 0,
        .imageSubresource =
          VkImageSubresourceLayers{
            .aspectMask = VK_IMAGE_ASPECT_COLOR_BIT,
            .mipLevel = 0,
            .baseArrayLayer = 0,
            .layerCount = 1,
          },
        .imageOffset =
          VkOffset3D{
            .x = 0,
            .y = 0,
            .z = 0,
          },
        .imageExtent =
          VkExtent3D{
            .width = (uint32_t)width,
            .height = (uint32_t)height,
            .depth = 1,
          },
      };
      vkCmdCopyBufferToImage(
        cmdbuf, _staging_buffer, _image, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &image_copy
      );

      recordBarrier(cmdbuf, _image.get(), _use_pair, family_transfer.transform([](auto transfer) {
        return std::pair{ transfer, false };
      }));
    };
    _release_sema = createSemaphore(device);
    recordAndSubmit(
      transfer_cmdbuf, transfer_queue, recorder, {}, { &_release_sema.get(), 1 }, VK_NULL_HANDLE
    );
  }

  auto getNeedWaitInfo() -> std::pair<VkSemaphore, VkPipelineStageFlags> {
    return { _release_sema, getImageSyncInfo(false, _dst_use).first.stage_mask };
  }

  void recordDstFamilyTransfer(VkCommandBuffer cmdbuf) {
    if (_family_transfer.has_value()) {
      recordBarrier(cmdbuf, _image.get(), _use_pair, std::pair{ _family_transfer.value(), true });
    }
  }
};

} // namespace vk