export module vulkan.descriptor;

import "vulkan_config.h";
import vulkan.resource;
import vulkan.tool;
import std;

export namespace vk {

constexpr VkDescriptorType descriptor_type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;

auto createDescriptorSetLayout(VkDevice device) -> DescriptorSetLayout {
  auto descriptor_set_binding = VkDescriptorSetLayoutBinding{
    .binding = 0,
    .descriptorType = descriptor_type,
    .descriptorCount = 1,
    .stageFlags = VK_SHADER_STAGE_VERTEX_BIT,
    .pImmutableSamplers = nullptr,
  };
  auto descriptor_set_layout_info = VkDescriptorSetLayoutCreateInfo{
    .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
    .bindingCount = 1,
    .pBindings = &descriptor_set_binding,
  };
  return DescriptorSetLayout{ device, descriptor_set_layout_info };
}

auto createDescriptorPool(uint32_t size, VkDevice device) -> DescriptorPool {
  // 每个类型的描述符的数量
  auto poolSize = VkDescriptorPoolSize{
    .type = descriptor_type,
    .descriptorCount = size,
  };
  auto pool_create_info = VkDescriptorPoolCreateInfo{
    .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
    // VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: 允许freeDescriptorSets
    .flags = VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT,
    // 会分配描述符集的最大数量
    .maxSets = size,
    .poolSizeCount = 1,
    .pPoolSizes = &poolSize,
  };
  return DescriptorPool{ device, pool_create_info };
}

auto allocateDescriptorSets(
  std::span<const VkDescriptorSetLayout> descriptor_set_layouts,
  VkDevice                               device,
  VkDescriptorPool                       descriptor_pool) -> DescriptorSets {

  auto allocate_info = VkDescriptorSetAllocateInfo{
    .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
    .descriptorPool = descriptor_pool,
    .descriptorSetCount = (uint32_t)descriptor_set_layouts.size(),
    .pSetLayouts = descriptor_set_layouts.data(),
  };
  return DescriptorSets{ device, allocate_info };
}

void updateDescriptorSet(VkDescriptorSet descriptor_set,
                         VkBuffer        buffer,
                         VkDevice        device) {
  auto src_buffer_info = VkDescriptorBufferInfo{
    .buffer = buffer,
    .offset = 0,
    .range = VK_WHOLE_SIZE,
  };
  auto descriptor_set_write_info = VkWriteDescriptorSet{
    .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
    .dstSet = descriptor_set,
    .dstBinding = 0,
    // 数组起始索引
    .dstArrayElement = 0,
    .descriptorCount = 1,
    .descriptorType = descriptor_type,
    // 是descriptorCount个，一个对应一个descriptor
    .pBufferInfo = &src_buffer_info,
  };
  vkUpdateDescriptorSets(device, 1, &descriptor_set_write_info, 0, nullptr);
}

} // namespace vk