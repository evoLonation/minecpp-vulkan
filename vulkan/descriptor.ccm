export module vulkan.descriptor;

import "vulkan_config.h";
import vulkan.resource;
import vulkan.tool;
import std;
import toy;

export namespace vk {

auto createDescriptorSetLayout(
  VkDevice device, VkDescriptorType descriptor_type, VkShaderStageFlags stage
) -> DescriptorSetLayout {
  auto descriptor_set_binding = VkDescriptorSetLayoutBinding{
    .binding = 0,
    .descriptorType = descriptor_type,
    .descriptorCount = 1,
    .stageFlags = stage,
    .pImmutableSamplers = nullptr,
  };
  auto descriptor_set_layout_info = VkDescriptorSetLayoutCreateInfo{
    .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
    .bindingCount = 1,
    .pBindings = &descriptor_set_binding,
  };
  return DescriptorSetLayout{ device, descriptor_set_layout_info };
}

auto createUniformDescriptorSetLayout(VkDevice device) -> DescriptorSetLayout {
  return createDescriptorSetLayout(
    device, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_SHADER_STAGE_VERTEX_BIT
  );
}

auto createSamplerDescriptorSetLayout(VkDevice device) -> DescriptorSetLayout {
  return createDescriptorSetLayout(
    device, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT
  );
}

auto createDescriptorPool(
  VkDevice device, uint32_t max_set_count, std::span<const VkDescriptorPoolSize> type_counts
) -> DescriptorPool {

  auto pool_create_info = VkDescriptorPoolCreateInfo{
    .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
    // VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: 允许freeDescriptorSets
    .flags = VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT,
    // 会分配描述符集的最大数量
    .maxSets = max_set_count,
    .poolSizeCount = (uint32_t)type_counts.size(),
    .pPoolSizes = type_counts.data(),
  };
  return DescriptorPool{ device, pool_create_info };
}

auto allocateDescriptorSets(
  VkDevice                               device,
  VkDescriptorPool                       descriptor_pool,
  std::span<const VkDescriptorSetLayout> descriptor_set_layouts
) -> DescriptorSets {

  auto allocate_info = VkDescriptorSetAllocateInfo{
    .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
    .descriptorPool = descriptor_pool,
    .descriptorSetCount = (uint32_t)descriptor_set_layouts.size(),
    .pSetLayouts = descriptor_set_layouts.data(),
  };
  return DescriptorSets{ device, allocate_info };
}

using DescriptorResource = std::variant<VkBuffer, std::pair<VkImageView, VkSampler>>;

struct DescriptorSetUpdate {
  VkDescriptorSet    descriptor_set;
  DescriptorResource resource;
};

void updateDescriptorSets(VkDevice device, std::span<const DescriptorSetUpdate> updates) {
  // descriptor set是资源的引用
  // vkUpdateDescriptorSets 只是更新descriptor set对应绑定到哪个资源
  using InfoVariant = std::variant<VkDescriptorBufferInfo, VkDescriptorImageInfo>;
  auto buffer_info_getter = [](VkBuffer buffer) -> InfoVariant {
    return VkDescriptorBufferInfo{
      .buffer = buffer,
      .offset = 0,
      .range = VK_WHOLE_SIZE,
    };
  };
  auto image_info_getter = [](std::pair<VkImageView, VkSampler> image) -> InfoVariant {
    return VkDescriptorImageInfo{
      .sampler = image.second,
      .imageView = image.first,
      .imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
    };
  };
  auto write_infos = std::vector<VkWriteDescriptorSet>{};
  auto sub_infos = std::vector<InfoVariant>{};
  sub_infos.reserve(updates.size());
  for (auto update : updates) {
    auto descriptor_set_write_info = VkWriteDescriptorSet{
      .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
      .dstSet = update.descriptor_set,
      .dstBinding = 0,
      // 数组起始索引
      .dstArrayElement = 0,
      .descriptorCount = 1,
    };
    sub_infos.push_back(
      std::visit(toy::OverloadLambda{ buffer_info_getter, image_info_getter }, update.resource)
    );
    auto& src_info = sub_infos.back();
    if (src_info.index() == 0) {
      // 是descriptorCount个，一个对应一个descriptor
      descriptor_set_write_info.pBufferInfo = &std::get<0>(src_info);
      descriptor_set_write_info.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
    } else {
      descriptor_set_write_info.pImageInfo = &std::get<1>(src_info);
      descriptor_set_write_info.descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
    }
    write_infos.push_back(descriptor_set_write_info);
  }
  vkUpdateDescriptorSets(device, write_infos.size(), write_infos.data(), 0, nullptr);
}

} // namespace vk