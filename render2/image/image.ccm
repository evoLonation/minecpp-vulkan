export module render.vk.image;

import std;
import toy;

import "vulkan_config.h";
import render.vk.resource;
import render.vk.memory;

export namespace rd::vk {

struct MipRange {
  uint32_t base_level;
  uint32_t count;
};

auto getSubresourceRange(VkImageAspectFlags aspect, MipRange mip_range) -> VkImageSubresourceRange;

auto getSubresourceLayers(VkImageAspectFlags aspect, uint32_t mip_level)
  -> VkImageSubresourceLayers;

auto createImage(
  VkFormat              format,
  uint32_t              width,
  uint32_t              height,
  VkImageUsageFlags     usage,
  uint32_t              mip_levels,
  VkSampleCountFlagBits sample_count
) -> rs::Image;

auto createImageView(VkImage image, VkFormat format, VkImageAspectFlags aspect, uint32_t mip_levels)
  -> rs::ImageView;

struct Image : public rs::Image {
public:
  Image() = default;
  Image(
    VkFormat              format,
    uint32_t              width,
    uint32_t              height,
    VkImageUsageFlags     usage,
    VkImageAspectFlags    aspect,
    uint32_t              mip_levels,
    VkSampleCountFlagBits sample_count
  );
  auto        image_view() const -> VkImageView { return _image_view; }
  static auto getAvailableSampleCounts() -> VkSampleCountFlags;

private:
  Memory        _memory;
  rs::ImageView _image_view;

private:
  static inline auto _sample_counts = VkSampleCountFlags{};
};

void copyBufferToImage(
  VkCommandBuffer       cmdbuf,
  VkBuffer              buffer,
  VkImage               image,
  VkImageAspectFlagBits aspect,
  uint32_t              width,
  uint32_t              height,
  uint32_t              mip_level
);

struct ImageBlit {
  VkImage               image;
  VkImageAspectFlagBits aspect;
  VkImageLayout         layout;
  uint32_t              mip_level;
  VkExtent2D            extent;
};

void blitImage(VkCommandBuffer cmdbuf, ImageBlit src, ImageBlit dst);

auto computeMipExtents(VkExtent2D extent) -> std::vector<VkExtent2D>;

} // namespace rd::vk