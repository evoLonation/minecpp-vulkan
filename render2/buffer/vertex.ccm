export module render.vertex;

import "vulkan_config.h";
import render.vk.device;
import render.vk.buffer;
import render.vk.sync;

import std;
import glm;
import toy;

export namespace rd {

template <typename Type>
consteval auto formatMapper() -> VkFormat {
  if constexpr (std::same_as<Type, glm::vec2>) {
    return VK_FORMAT_R32G32_SFLOAT;
  } else if constexpr (std::same_as<Type, glm::vec3>) {
    return VK_FORMAT_R32G32B32_SFLOAT;
  } else if constexpr (std::same_as<Type, glm::vec4>) {
    return VK_FORMAT_R32G32B32A32_SFLOAT;
  } else if constexpr (std::same_as<Type, float>) {
    return VK_FORMAT_R32_SFLOAT;
  }
}

struct VertexInfo : public vk::DeviceChecker<VertexInfo> {
  const VkVertexInputBindingDescription*             binding_description;
  std::span<const VkVertexInputAttributeDescription> attribute_descriptions;
  friend auto operator==(const VertexInfo& a, const VertexInfo& b) -> bool;
  VertexInfo() = default;
  VertexInfo(
    const VkVertexInputBindingDescription*             binding_description,
    std::span<const VkVertexInputAttributeDescription> attribute_descriptions
  );

private:
  static std::vector<VkFormat> _formats;
  friend vk::DeviceChecker<VertexInfo>;
  static auto checkPdevice(const vk::PdeviceContext& ctx) -> bool;
};

// todo: add align
template <typename... DataTypes>
  requires(std::is_trivially_copyable_v<DataTypes> && ...)
struct Vertex : public std::array<char, (sizeof(DataTypes) + ...)> {
  using Base = std::array<char, (sizeof(DataTypes) + ...)>;
  Vertex(DataTypes&&... data) {
    int offset = 0;
    ((*reinterpret_cast<DataTypes*>(Base::data() + offset) = data, offset += sizeof(DataTypes)),
     ...);
  }
  static auto getVertexInfo() -> VertexInfo {
    return { &binding_description<>, attribute_descriptions<> };
  }

  // must make the static member as template variable, otherwise the Vertex is incomplete type when
  // construct the variable
  template <typename = void>
  static constexpr auto binding_description = VkVertexInputBindingDescription{
    .binding = 0,
    .stride = sizeof(Vertex),
    // VK_VERTEX_INPUT_RATE_{VERTEX|INSTANCE}:
    // 是在每个vertex或者instance后移动到下一个data entry
    .inputRate = VK_VERTEX_INPUT_RATE_VERTEX,
  };
  template <typename = void>
  static constexpr auto attribute_descriptions = []() {
    auto attribute_descriptions =
      std::array<VkVertexInputAttributeDescription, sizeof...(DataTypes)>{};

    uint32_t i = 0;
    uint32_t offset = 0;
    ((attribute_descriptions[i] =
        VkVertexInputAttributeDescription{
          .location = i,
          .binding = 0,
          .format = formatMapper<DataTypes>(),
          .offset = offset,
        },
      i++,
      offset += sizeof(DataTypes)),
     ...);
    return attribute_descriptions;
  }();
};

class DeviceLocalBuffer : public vk::Buffer {
private:
  vk::StagingBuffer _staging_buffer;

public:
  DeviceLocalBuffer() = default;

  DeviceLocalBuffer(
    VkBufferUsageFlags usage, vk::Scope dst_scope, std::span<const std::byte> buffer_data
  );
};

class VertexBuffer : public DeviceLocalBuffer {
private:
  VertexInfo _vertex_info;

public:
  VertexBuffer() = default;
  template <ranges::contiguous_range R>
  VertexBuffer(R&& range) : VertexBuffer{ std::span<const ranges::range_value_t<R>>{ range } } {}
  template <toy::InstantiationOf<Vertex> VertexT>
  // using VertexT = Vertex<glm::vec3>;
  VertexBuffer(std::span<const VertexT> vertex_data)
    : VertexBuffer(std::as_bytes(vertex_data), VertexT::getVertexInfo()) {}

  auto getVertexInfo() const -> VertexInfo { return _vertex_info; }

private:
  VertexBuffer(std::span<const std::byte> vertex_data, VertexInfo vertex_info);
};

class IndexBuffer : public DeviceLocalBuffer {
public:
  auto getIndexType() -> VkIndexType { return VK_INDEX_TYPE_UINT16; }

private:
  int _index_number;

public:
  IndexBuffer() = default;
  IndexBuffer(std::span<const uint16_t> indices);

  auto getIndexNumber() -> uint32_t { return _index_number; }
};

} // namespace rd
