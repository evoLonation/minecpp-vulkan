export module render.vk.surface;

import "vulkan_config.h";
import render.vk.resource;
import render.vk.tool;

import "glfw_config.h";
import glfw;

import std;
import toy;

export namespace rd::vk {

namespace extensions {
auto surface = std::vector<std::string>{
  "VK_KHR_surface",
  "VK_KHR_win32_surface",
  "VK_EXT_surface_maintenance1",
  "VK_KHR_get_surface_capabilities2",
};
}

/**
 * @brief Create a Surface object, need created instance first
 *
 * @param window
 * @return rs::Surface
 */
auto createSurface(glfw::Window& window) -> rs::Surface {
  auto create_info = VkWin32SurfaceCreateInfoKHR{
    .sType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
    .hinstance = GetModuleHandle(nullptr),
    .hwnd = glfwGetWin32Window(window.get()),
  };
  // implicit use instance
  return rs::Surface{ create_info };
}

} // namespace rd::vk